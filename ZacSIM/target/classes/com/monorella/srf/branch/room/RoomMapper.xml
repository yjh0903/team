<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.monorella.srf.branch.room.RoomMapper">
  	
  	<!--기간 만료예정자 목록 조회 -->
  	<select id="selectMemberEndDate" parameterType="java.util.Map" resultType="com.monorella.srf.branch.dto.EndDateList">
  		SELECT 
			 member_cd
			, bm.branch_owner_cd
			, bm.seat_cd
			, bm.member_nm
			, bm.member_tel
			, CURRENT_DATE() AS member_date
			, bm.member_end_date
			, bs.seat_cnumber
			, br.room_cd
			, br.room_nm
		FROM branch_member_tb bm 
		INNER JOIN branch_saet_tb bs ON bm.seat_cd = bs.seat_cd
		INNER JOIN branch_room_tb br ON bs.room_cd = br.room_cd
		WHERE bm.member_end_date &lt;= date_add(now(), interval +#{dateNum} day)  
		AND bm.member_seat_state = 'Y'
		AND bm.branch_owner_cd = #{branch_owner_cd}
  	</select>
  	
  	<!--열람실변 기간만료 예정자수 조회 -->
  	<select id="selectCountEndDate" parameterType="java.util.Map" resultType="com.monorella.srf.branch.dto.EndDateList">
		SELECT 
			 COUNT(member_cd) AS member_count
			, br.room_nm
			, (COUNT(member_cd)/brd.total_seat*100) AS member_percentage
		FROM branch_member_tb bm 
		INNER JOIN branch_saet_tb bs ON bm.seat_cd = bs.seat_cd
		INNER JOIN branch_room_tb br ON bs.room_cd = br.room_cd
		INNER JOIN branch_room_dashboard_tb brd ON br.room_cd = brd.room_cd
		WHERE bm.member_end_date &lt;= date_add(now(), interval +#{dateNum} day)  
		AND bm.member_seat_state = 'Y'
		AND bm.branch_owner_cd = #{branch_owner_cd}
		GROUP BY room_nm
  	</select>
  	
  	<!-- 열람석 MAX번호 조회 -->
  	<select id="selectMaxCnumber" parameterType="com.monorella.srf.branch.dto.Room" resultType="int">
  		SELECT MAX(seat_cnumber) FROM branch_saet_tb WHERE branch_owner_cd = #{branch_owner_cd} 
  	</select>
  	
  	<!-- 열람실 총코드 수 조회 -->
  	<select id="selectCountRoomCd" resultType="int">
  		SELECT COUNT(room_cd) FROM branch_room_tb
  	</select>
  	
  	<!-- 이동 후 좌석 지정 'Y'로 -->
  	<update id="modifySeatCdAfter" parameterType="com.monorella.srf.branch.dto.Seat">
  		UPDATE branch_saet_tb
			SET
				seat_appoint='Y'
				, colseat_state =#{colseat_state}
			WHERE seat_cd = #{seat_cd}
  	</update>
  	
  	<!-- 이동 전 좌석 지정 'N'으로 해당 회원 좌석코드를 이동할 좌석코드로 modify -->
  	<update id="modifyMoveSeat" parameterType="java.util.Map">
  		UPDATE branch_saet_tb bs INNER JOIN branch_member_tb bm
		ON bs.seat_cd = bm.seat_cd
			SET
			  bs.seat_appoint = 'N' <!-- (이동전 좌석 지정 N) -->
			  , bs.colseat_state = '빈좌석'
			  , bm.seat_cd = #{seatcd_after}   <!-- (이동 후 좌석코드) -->
		WHERE bs.seat_cd = #{seatcd_before} <!-- (이동전 좌석코드) -->
  	</update>
  
	<!-- 열람실별 미결제 좌석 조회 -->
	<select id="selectNotPaySeat" parameterType="com.monorella.srf.branch.dto.Seat" resultType="com.monorella.srf.branch.dto.Seat">
		SELECT 
			seat_cd
			, seat_cnumber
		FROM branch_saet_tb 
		WHERE room_cd = #{room_cd} AND seat_appoint = 'N'
	</select>
	
	<!-- 열람실 현황 삭제 -->
	<delete id="deleteRoomDashBoard" parameterType="com.monorella.srf.branch.dto.Room">
		DELETE FROM branch_room_dashboard_tb WHERE room_cd = #{room_cd}
	</delete>
	
	<!-- 열람실 현황 전체 modify -->
	<update id="modifyAllRoomDashBoard" parameterType="com.monorella.srf.branch.dto.RoomDashBoard">
		UPDATE branch_room_dashboard_tb
			SET
				seat_in= #{seat_in}
				, seat_out=#{seat_out}
				, pay_seat=#{pay_seat}
				, notpay_seat=#{notpay_seat}
			WHERE room_cd =#{room_cd}
	</update>
	
  	<!-- 열람실 현황 입실&퇴실 modify -->
  	<update id="modifySeatRoomDashBoard" parameterType="com.monorella.srf.branch.dto.RoomDashBoard">
  		UPDATE branch_room_dashboard_tb
			SET
				seat_in=#{seat_in},
				seat_out=#{seat_out}
			WHERE room_cd= #{room_cd}
  	</update>
  	
  	<!-- 열람실 현황 결제&미결제 수 modify -->
	<update id="modifyRoomDashBoard" parameterType="com.monorella.srf.branch.dto.RoomDashBoard">
			UPDATE branch_room_dashboard_tb
				SET 
					pay_seat= #{pay_seat},
					notpay_seat= #{notpay_seat}
				WHERE room_cd= #{room_cd}
	</update>
  	
  	<!-- 열람실 현황 조회 -->
  	<select id="selctRoomDashBoardNow" resultType="com.monorella.srf.branch.dto.RoomDashBoard" parameterType="com.monorella.srf.branch.dto.BranchOwner">
		SELECT 
			brd.room_dash_cd
			, brd.room_cd
			, brd.seat_in
			, brd.seat_out
			, brd.pay_seat
			, brd.notpay_seat
			, brd.total_seat
			, br.room_nm
		FROM branch_room_dashboard_tb brd
		INNER JOIN branch_room_tb br ON brd.room_cd = br.room_cd
		WHERE br.branch_owner_cd = #{branch_owner_cd}
		ORDER BY brd.room_cd ASC
  	</select>
  	
  	<!-- 열람실 현황 초기화 입력데이터 조회 -->
  	<select id="selectRoomDashBoard" resultType="com.monorella.srf.branch.dto.RoomDashBoard" parameterType="String">
  		SELECT 
  			room_cd
  			,(SELECT COUNT(seat_appoint) FROM branch_saet_tb WHERE seat_appoint = 'Y' AND room_cd = #{room_cd}) AS pay_seat
  			,(SELECT COUNT(seat_appoint) FROM branch_saet_tb WHERE seat_appoint = 'N' AND room_cd = #{room_cd}) AS notpay_seat
  			,(SELECT COUNT(colseat_state) FROM branch_saet_tb WHERE colseat_state = '입실' AND room_cd = #{room_cd}) AS seat_in
  			,(SELECT COUNT(colseat_state) FROM branch_saet_tb WHERE colseat_state = '퇴실' AND room_cd = #{room_cd}) AS seat_out
		FROM branch_saet_tb
		WHERE room_cd = #{room_cd} LIMIT 1
  	</select>
  	
  	<!-- 열람석 코드 가져오기 -->
  	<select id="selectSeatCd" parameterType="com.monorella.srf.branch.dto.Seat" resultType="com.monorella.srf.branch.dto.Seat">
  		SELECT
			seat_cd
			, room_cd
			, seat_appoint
		FROM branch_saet_tb
		WHERE room_cd = #{room_cd} AND seat_cnumber = #{seat_cnumber}
  	</select>
  	
  	<!-- 지점별 열람실 코드 조회 -->
  	<select id="selectRoomCdBranch" parameterType="com.monorella.srf.branch.dto.Room" resultType="int">
  		SELECT COUNT(room_cd) FROM branch_room_tb WHERE branch_owner_cd = #{branch_owner_cd}
  	</select>
  	
  	<!-- 열람실 코드 전체 조회  -->
  	<select id="selectRoomAllCd" resultType="com.monorella.srf.branch.dto.Room">
  		SELECT 
			room_cd
		FROM branch_room_tb
  	</select>
  	
  	<!--열람석 code에 일치하는 열람실 Code 조회 -->
  	<select id="selectRoomCdeqSeatCd" parameterType="int" resultType="com.monorella.srf.branch.dto.Seat">
	  	SELECT
			 room_cd
			 , colseat_state
		FROM branch_saet_tb
		WHERE seat_cd = #{seat_cd}	
  	</select>
  	
  	<!-- 열람실 코드 가져오기 -->
  	<select id="selectRoomCd" resultType="String">
  		SELECT  CONCAT(LEFT(room_cd, 7) , MAX(SUBSTRING(room_cd, 8) + 0)) AS room_cd FROM branch_room_tb
  	</select>
  
  	<!-- 열람실별 열람석 정보 가져오기 -->
  	<select id="selectRoomSeat" parameterType="com.monorella.srf.branch.dto.Room" resultType="com.monorella.srf.branch.dto.Seat">
  		SELECT
	  		 bs.seat_cd
	  		 ,  bs.room_cd
	  		 ,  bs.branch_owner_cd
	  		 ,  bs.seat_cnumber
	  		 ,  bs.seat_appoint
	  		 ,  bs.colseat_state
	  		 ,  bs.seat_row
	  		 ,  bs.seat_col
	  		 ,  bm.member_nm
		FROM branch_saet_tb bs LEFT JOIN branch_member_tb bm ON bs.seat_cd = bm.seat_cd 
		WHERE room_cd = #{room_cd}
  	</select>
  
  	<!-- 열람석 배치하기 -->
	<update id="modifyRoomSeat" parameterType="com.monorella.srf.branch.dto.Seat">
		UPDATE branch_saet_tb
			SET
				seat_row=#{seat_row},
				seat_col=#{seat_col}
		WHERE room_cd = #{room_cd} AND seat_cnumber = #{seat_cnumber}
	</update>
  
  	<!-- 열람석 삭제하기 -->
  	<delete id="deleteSeat" parameterType="String">
  		DELETE FROM branch_saet_tb WHERE room_cd=#{room_cd}
  	</delete>
  	<!-- 열람실 삭제하기 -->
  	<delete id="deleteRoom" parameterType="String">
  		DELETE FROM branch_room_tb WHERE room_cd=#{room_cd}
  	</delete>
  	
  	<!-- 열람석 정보가져오기 -->
    <select id="selectSeat" resultType="com.monorella.srf.branch.dto.Seat" parameterType="com.monorella.srf.branch.dto.BranchOwner">
    	SELECT 
    		bs.seat_cd
    		, bs.room_cd
    		, bs.branch_owner_cd
    		, bs.seat_cnumber
    		, bs.seat_appoint
    		, bs.colseat_state
    		, bm.member_nm
    		, bm.member_cd
    		, bm.member_end_date
		FROM branch_saet_tb bs
		LEFT JOIN branch_member_tb bm ON bs.seat_cd = bm.seat_cd
		WHERE bs.branch_owner_cd = #{branch_owner_cd}
    </select>
  
	<!-- 열람실 정보가져오기 -->
	<select id="selectRoom" resultType="com.monorella.srf.branch.dto.Room" parameterType="com.monorella.srf.branch.dto.BranchOwner">
		SELECT 
			room_cd
			, branch_owner_cd
			, room_nm
			, seat_num
			, room_division
		FROM branch_room_tb
		WHERE branch_owner_cd = #{branch_owner_cd}
		ORDER BY room_nm ASC
	</select>
	
	<!-- 열람실 현황 입력 초기화 --> 
	<insert id="insertRoomDashBoard" parameterType="com.monorella.srf.branch.dto.RoomDashBoard">
		INSERT INTO branch_room_dashboard_tb(
			room_cd
			, seat_in
			, seat_out
			, pay_seat
			, notpay_seat
			, total_seat)
		VALUES (
			#{room_cd}
			, #{seat_in}
			, #{seat_out}
			, #{pay_seat}
			, #{notpay_seat}
			, #{pay_seat}+#{notpay_seat});
	</insert>  
	
	<!-- 열람석 등록 -->
	<insert id="insertSeat" parameterType="com.monorella.srf.branch.dto.Seat">
		INSERT INTO branch_saet_tb(
			room_cd
			, branch_owner_cd
			, seat_cnumber
			, colseat_state
			, seat_appoint)
		VALUES (
		#{room_cd}
		, #{branch_owner_cd}
		, #{seat_cnumber}
		, '빈좌석'
		, 'N')
	</insert>
	
	
	<!-- 열람실 등록 -->
	<insert id="insertRoom" parameterType="com.monorella.srf.branch.dto.Room">
			<selectKey resultType="String" keyProperty="room_cd" order="BEFORE">
				SELECT CONCAT('room_cd', MAX(CONVERT(SUBSTRING(room_cd, 8), UNSIGNED))+1) as room_cd
				FROM branch_saet_tb
			</selectKey>
		INSERT INTO branch_room_tb(
			room_cd
			, branch_owner_cd
			, room_nm
			, seat_num
			, room_division)
		VALUES (
			#{room_cd} 
			, #{branch_owner_cd}
			, #{room_nm}
			, #{seat_num}
			, #{room_division})	
	</insert>
	
	<!-- 열람실 최초등록 -->
	<insert id="insertFristRoom" parameterType="com.monorella.srf.branch.dto.Room">
		INSERT INTO branch_room_tb(
			room_cd
			, branch_owner_cd
			, room_nm
			, seat_num
			, room_division)
		VALUES (
			#{room_cd} 
			, #{branch_owner_cd}
			, #{room_nm}
			, #{seat_num}
			, #{room_division})	
	</insert>
	
  </mapper>